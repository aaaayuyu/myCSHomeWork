<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="堆体系结构 一个JVM实例只存在一个堆内存，堆内存的大小是可调节的。类加载器读取类文件后，需要把类、方法、常量、变量放在堆内存中，保存所有引用类型的真实信息，以方便执行器指向，堆内存分为三个部分：年轻" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>【JVM】堆体系结构及其内存调优 - xd会飞的猫 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.ico?v=20200522" type="image/x-icon" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/loveisintheair/bundle-loveisintheair.min.css?v=uI4derS8SzeklkcuGM9ZZcviZI9ud2nNvmccYFPeg2g" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/xdcat/custom.css?v=AB073C0Se6mGvo0uJ/E53j&#x2B;p2vA=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/loveisintheair/bundle-loveisintheair-mobile.min.css?v=pX6G4J5bGVxIWY7DIVGmuh5jg0uF78ayk3OyJdCklPI" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/xdcat/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/xdcat/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/xdcat/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=6bwfCY2e02dLOXNW99G2BHZkYFmw9QyYTWeJ-W-sudo"></script>
    <script>
        var currentBlogId = 369805;
        var currentBlogApp = 'xdcat';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'LoveIsIntheAir';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<center>
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a href="https://www.cnblogs.com/xdcat/"><img id="blogLogo" src="/skins/loveisintheair/images/logo.gif" alt="" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/xdcat/">xd会飞的猫</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
	<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
	<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/xdcat/">
首页</a>
</li>
	<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
	<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/xd%E4%BC%9A%E9%A3%9E%E7%9A%84%E7%8C%AB">
联系</a></li>
	<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
	<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/xdcat/rss/">
订阅</a>
	
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/xdcat/rss/">
    <img src="/skins/loveisintheair/images/xml.gif" alt="订阅" />
</a></li>
</ul>


		<div class="blogStats">
			
			<!--done-->
随笔- 
22&nbsp;
文章- 
0&nbsp;
评论- 
0&nbsp;



			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div class="clear"></div>
	<div id="topicList">
		<div id="post_detail">
<!--done-->
<div id="topics">
	<div class="post">
		<h1 class = "postTitle">
			
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/xdcat/p/12986781.html">【JVM】堆体系结构及其内存调优</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			
<div id="cnblogs_post_body" class="blogpost-body ">
    <h2>堆体系结构</h2>
<p>一个JVM实例只存在一个堆内存，堆内存的大小是可调节的。类加载器读取类文件后，需要把类、方法、常量、变量放在堆内存中，保存所有引用类型的真实信息，以方便执行器指向，堆内存分为三个部分：年轻代、老年代、永久代。</p>
<p>Java7之前，堆内存在逻辑上分为：年轻代、老年代、永久代。物理上分为：年轻代、老年代</p>
<p>&nbsp;Java8：永久代 ---&gt; 元空间</p>
<p>&nbsp;<img src="https://img2020.cnblogs.com/blog/1207748/202005/1207748-20200530093852126-149790265.png" alt="" width="207" height="171"></p>
<p>新生区是类的诞生、成长、消亡的区域。一个类在新生区产生，最后被垃圾回收器收集。新生区分为伊甸区和幸存者区。幸存者区分为幸存0区，幸存1区。</p>
<p>当伊甸区空间用完的时候，程序还需要创建对象，JVM的垃圾回收器将对伊甸区进行垃圾回收（Minor GC），将伊甸区中不再被其他对象引用的对象进行销毁，将剩余的对象移动到幸存0区。</p>
<p>若幸存0区（from区）满了，对幸存0区进行垃圾回收，将剩余的对象移动到幸存1区。如果幸存1区（to区）满了，再移动到养老区。</p>
<p>如果养老区满了，就产生了Major GC（Full GC），进行养老区的内存清理。如果执行了Full GC后依然无法进行对象的保存，就会产生OOM异常，OutOfMemoryError。</p>
<p>异常：java.lang.OutOfMemoryError: Java heap space</p>
<p>JVM堆内存不够，原因：</p>
<ul>
<li>JVM的堆内存设置的太小，可以调整-Xms、-Xmx</li>
<li>代码中创建了大量的大对象，并且长时间不能被垃圾回收器收集（存在被引用）</li>
</ul>
<h2>Minor GC的过程</h2>
<p>Java堆从GC的角度可以细分为新生代（Eden区、from 存活区、to 存活区，空间比例8:1:1）和老年代（空间比例1:2）。</p>
<p><img src="https://img2020.cnblogs.com/blog/1207748/202005/1207748-20200530102058415-299796093.png" alt="" width="468" height="123"></p>
<p>复制 ☞ 清空 ☞ 互换</p>
<p>1. eden、survivor from 复制到 survivor to，对象年龄+1。</p>
<p>当eden区满，触发第一次GC，存活对象拷贝到survivor from区。当eden区再次触发GC，会扫描eden和from，对这两个区进行垃圾回收，将存活的对象，复制到to区，对象年龄+1。（如果有对象年龄达到了老年的标准，拷贝到老年代，对象年龄+1）</p>
<p>2. 清空eden、survivor from</p>
<p>清空eden和survivor from中对象，此时from为。</p>
<p>3.&nbsp;survivor from 和 survivor to 互换</p>
<p>to区存在对象，变成下一次GC的from区，from区成为下一次GC的to区，部分对象会在form和to区域复制往来15次（JVM的MaxTenuringshold参数默认是15），如果最终还是存活，就存入老年代。</p>
<h2>方法区和永久代</h2>
<p>参考自博客：<a href="https://www.jianshu.com/p/66e4e64ff278">https://www.jianshu.com/p/66e4e64ff278</a></p>
<p>在JDK1.6及之前，运行时常量池是方法区的一个部分，同时方法区里面存储了类的元数据信息、静态变量、即时编译器编译后的代码（比如spring 使用IOC或者AOP创建bean时，或者使用cglib，反射的形式动态生成class信息等）等。在JDK1.7及以后，JVM已经将运行时常量池从方法区中移了出来，在JVM堆开辟了一块区域存放常量池。</p>
<p>方法区和堆都是各个线程共享的内存区域，方法区用于存储虚拟机加载的类信息、普通常量、静态常量、编译器编译后的代码等，虽然JVM规范将方法区描述为堆的一个逻辑部分，但它还有一个别名叫Non-Heap，目的是和堆分开。</p>
<p>方法区常被成为永久代，严格来说二者不同，只是用永久代来实现方法区而已，方法区和永久代的关系很像Java中接口和类的关系，类实现了接口，而永久代就是HotSpot虚拟机对虚拟机规范中方法区的一种实现方式。</p>
<p><span style="color: #ff0000;">永久代在JDK1.7之前有</span>，是一个常驻内存区域，用于存放JDK自身携带的class、interface的元数据，也就是说它存储的是运行环境必须的类信息，被装在进此区域的数据是不会被垃圾回收器回收掉的，关闭jvm才会释放这个区域所占的内存。</p>
<p><img src="https://img2020.cnblogs.com/blog/1207748/202005/1207748-20200530105309660-1486206067.png" alt="" width="552" height="163"></p>
<p>HotSpot虚拟机中存在三种垃圾回收现象，minor GC、major GC和full GC。对新生代进行垃圾回收叫做minor GC，对老年代进行垃圾回收叫做major GC，同时对新生代、老年代和永久代进行垃圾回收叫做full GC。许多major GC是由minor GC触发的，所以很难将这两种垃圾回收区分开。major GC和full GC通常是等价的，收集整个GC堆。但因为HotSpot VM发展了这么多年，外界对各种名词的解读已经完全混乱了，当有人说&ldquo;major GC&rdquo;的时候一定要问清楚他想要指的是上面的full GC还是major GC。</p>
<h2>元空间</h2>
<p>参考自博客：<a href="https://www.jianshu.com/p/66e4e64ff278">https://www.jianshu.com/p/66e4e64ff278</a></p>
<div>
<div>HotSpot虚拟机在<span style="color: #ff0000;">1.8之后已经取消了永久代</span>，改为元空间，<span style="color: #ff0000;">类的元信息被存储在元空间</span>中。<span style="color: #ff0000;">元空间没有使用堆内存</span>，而是与堆不相连的<span style="color: #ff0000;">本地内存区域</span>。所以，理论上系统可以使用的内存有多大，元空间就有多大，所以不会出现永久代存在时的内存溢出问题。</div>
<div>&nbsp;</div>
<div>这项改造也是有必要的，<span style="color: #ff0000;">永久代的调优是很困难的</span>，虽然可以设置永久代的大小，但是很难确定一个合适的大小，因为其中的影响因素很多，比如类数量的多少、常量数量的多少等。永久代中的元数据的位置也会随着一次full GC发生移动，比较消耗虚拟机性能。同时，HotSpot虚拟机的每种类型的垃圾回收器都需要特殊处理永久代中的元数据。将元数据从永久代剥离出来，不仅实现了对元空间的无缝管理，还可以简化Full GC以及对以后的并发隔离类元数据等方面进行优化。</div>
<h2>堆内存调优</h2>
<p>在JDK1.7中</p>
<p><img src="https://img2020.cnblogs.com/blog/1207748/202005/1207748-20200530112703105-1272296424.png" alt="" width="420" height="152"></p>
<p>在JDK1.8中，元空间取代永久代。元空间和永久代的最大的区别是永久代使用的是JVM的堆内存，<span style="color: #ff0000;">元空间不在虚拟机中，而是使用本机物理内存</span>。默认清空下，元空间只受本地内存限制，类的元数据放入本地内存，字符串常量池和类型静态变量放入java堆，类的元数据的加载量不再受MaxPermSize控制，而是由系统实际的可用空间来控制。</p>
<p><img src="https://img2020.cnblogs.com/blog/1207748/202005/1207748-20200530113102566-456274894.png" alt="" width="426" height="164"></p>
<p>-Xms：初始分配大小，默认为物理内存的1/64</p>
<p>-Xmx：最大分配内存，默认为物理内存的1/4</p>
<p>-XX:+PrintGCDetails：输出详细的GC处理日志</p>
<p><img src="https://img2020.cnblogs.com/blog/1207748/202005/1207748-20200530115601806-792504969.png" alt="" width="626" height="618"></p>
<p>配置完Xms、Xmx后的输出结果</p>
<p><span style="font-family: 'Microsoft YaHei';">java.lang.OutOfMemoryError: Java heap space异常GC处理日志：</span></p>
<div class="cnblogs_code">
<pre>[GC (Allocation Failure) [PSYoungGen: 2045K-&gt;488K(2560K)] 2045K-&gt;781K(9728K), 0.0014360 secs] [Times: user=0.00 sys=0.00, real=0.00<span style="color: #000000;"> secs] 
[GC (Allocation Failure) [PSYoungGen: 2534K</span>-&gt;488K(2560K)] 2827K-&gt;1548K(9728K), 0.0008101 secs] [Times: user=0.00 sys=0.00, real=0.00<span style="color: #000000;"> secs] 
[GC (Allocation Failure) [PSYoungGen: 2171K</span>-&gt;504K(2560K)] 4318K-&gt;3194K(9728K), 0.0006870 secs] [Times: user=0.00 sys=0.00, real=0.00<span style="color: #000000;"> secs] 
[Full GC (Ergonomics) [PSYoungGen: 2207K</span>-&gt;0K(2560K)] [ParOldGen: 7037K-&gt;2826K(7168K)] 9245K-&gt;2826K(9728K), [Metaspace: 3454K-&gt;3454K(1056768K)], 0.0051352 secs] [Times: user=0.00 sys=0.00, real=0.00<span style="color: #000000;"> secs] 
[GC (Allocation Failure) [PSYoungGen: 0K</span>-&gt;0K(2560K)] 5000K-&gt;5000K(9728K), 0.0003304 secs] [Times: user=0.00 sys=0.00, real=0.00<span style="color: #000000;"> secs] 
[GC (Allocation Failure) [PSYoungGen: 0K</span>-&gt;0K(2560K)] 5000K-&gt;5000K(9728K), 0.0002962 secs] [Times: user=0.00 sys=0.00, real=0.00<span style="color: #000000;"> secs] 
[Full GC (Allocation Failure) [PSYoungGen: 0K</span>-&gt;0K(2560K)] [ParOldGen: 5000K-&gt;3913K(7168K)] 5000K-&gt;3913K(9728K), [Metaspace: 3455K-&gt;3455K(1056768K)], 0.0028924 secs] [Times: user=0.00 sys=0.00, real=0.00<span style="color: #000000;"> secs] 
[GC (Allocation Failure) [PSYoungGen: 0K</span>-&gt;0K(1536K)] 3913K-&gt;3913K(8704K), 0.0005099 secs] [Times: user=0.00 sys=0.00, real=0.00<span style="color: #000000;"> secs] 
[Full GC (Allocation Failure) [PSYoungGen: 0K</span>-&gt;0K(1536K)] [ParOldGen: 3913K-&gt;3889K(7168K)] 3913K-&gt;3889K(8704K), [Metaspace: 3455K-&gt;3455K(1056768K)], 0.0072665 secs] [Times: user=0.06 sys=0.02, real=0.01<span style="color: #000000;"> secs] 
Exception in thread </span>"main"<span style="color: #000000;"> java.lang.OutOfMemoryError: Java heap space
    at java.util.Arrays.copyOf(Arrays.java:</span>3332<span style="color: #000000;">)
    at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:</span>124<span style="color: #000000;">)
    at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:</span>674<span style="color: #000000;">)
    at java.lang.StringBuilder.append(StringBuilder.java:</span>208<span style="color: #000000;">)
    at day05JVM01.T2.main(T2.java:</span>15)</pre>
</div>
<h4>YoungGC</h4>
<p>[GC (Allocation Failure)&nbsp; 内存分配失败</p>
<p>[PSYoungGen: 2045K-&gt;488K(2560K)] 2045K-&gt;781K(9728K), 0.0014360 secs]&nbsp;</p>
<p>[GC类型:GC前young区的内存占用-&gt;GC后young区的内存占用(新生代的总内存)] GC前JVM堆内存占用-&gt;GC后JVM堆内存占用(JVM堆的总内存),GC耗时</p>
<p>[Times: user=0.00 sys=0.00, real=0.00 secs]&nbsp;</p>
<p>[GC用户耗时，系统耗时，实际耗时]</p>
<h4><span>&nbsp;FullGC</span></h4>
<p><span>[Full GC (Allocation Failure) </span></p>
<p><span>[PSYoungGen: 0K-&gt;0K(1536K)] </span></p>
<p><span>[ParOldGen: 3913K-&gt;3889K(7168K)] 3913K-&gt;3889K(8704K), </span></p>
<p><span>[Metaspace: 3455K-&gt;3455K(1056768K)], 0.0072665 secs] </span></p>
<p><span>[Times: user=0.06 sys=0.02, real=0.01<span> secs]</span></span></p>
<h2>什么是GC？</h2>
<p>GC是分类收集算法，JVM在进行GC的时候并不是每次对三个区域一起回收，大部分时候是回收新生代。频繁收集Young区，较少收集Old区，基本不动元空间。GC按照回收的区域分成了：普通GC minor GC和全局GC Full GC</p>
<p>Minor GC：只针对新生代区域的GC，发生在新生代的垃圾收集，因为大多数JAVA对象存活率都不高，所以Minor GC的操作非常频繁，垃圾回收的速度比较快。</p>
<p>Full GC：指发生在老年代的垃圾收集操作，出现Full GC，经常会伴随至少一次的Minor GC（但不绝对）。Full GC的速度一般比Minor GC 慢10倍以上。</p>
<p>GC有四大算法：引用计数法、复制算法、标记清除、标记压缩。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
		</div>
		<div class="postDesc">posted @ 
<span id="post-date">2020-05-30 12:49</span>&nbsp;
<a href="https://www.cnblogs.com/xdcat/">xd会飞的猫</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12986781" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12986781);return false;">收藏</a></div>
	</div>
	
	
</div><!--end: topics 文章、评论容器-->
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 369805, cb_blogApp = 'xdcat', cb_blogUserGuid = '09634cba-6d8c-478d-42ea-08d49c352df3';
    var cb_entryId = 12986781, cb_entryCreatedDate = '2020-05-30 12:49', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;"></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div></div>


	</div><!--end: topicList 文章列表容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="calendar"><div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                    <script>loadBlogDefaultCalendar();</script></div>
			
			<DIV id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</DIV>
			
		</div><!--end: sideBarMain -->
		<div class="clear"></div>
		<div id="footer">
			<!--done-->
Copyright &copy; 2020 xd会飞的猫
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



		</div><!--end: footer -->
	</div><!--end: sideBar 侧边栏容器 -->
</div><!--end: home 自定义的最大容器 -->
</center>


    
</body>
</html>
